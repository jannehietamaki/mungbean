/*   Copyright 2009 Janne Hietam√§ki   Licensed under the Apache License, Version 2.0 (the "License");   you may not use this file except in compliance with the License.   You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License. */package mungbean.protocol;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.nio.charset.Charset;import mungbean.Assert;public class LittleEndianDataReader {	private final static Charset UTF8 = Charset.forName("UTF-8");	private final InputStream in;	public LittleEndianDataReader(InputStream input) {		Assert.notNull(input, "InputStream can not be null");		this.in = input;	}	public int readInt() {		try {			byte[] buf = new byte[4];			in.read(buf);			int value = ((((((buf[3] & 0xFF) << 24) | (buf[2] & 0xFF)) << 16) | (buf[1] & 0xFF)) << 8) | (buf[0] & 0xFF);			return value;		} catch (IOException e) {			throw new RuntimeIOException(e);		}	}	public short readShort() {		try {			byte[] buf = new byte[2];			in.read(buf);			return (short) (((buf[1] & 0xFF) << 8) | (buf[0] & 0xFF));		} catch (IOException e) {			throw new RuntimeIOException(e);		}	}	public int readByte() {		try {			return in.read();		} catch (IOException e) {			throw new RuntimeIOException(e);		}	}	public String readCString() {		ByteArrayOutputStream out = new ByteArrayOutputStream();		int b;		while ((b = readByte()) > 0) {			out.write((byte) b);		}		return new String(out.toByteArray(), UTF8);	}	public void read(byte[] data) {		try {			in.read(data);		} catch (IOException e) {			throw new RuntimeIOException(e);		}	}	public long readLong() {		try {			long val = 0;			byte[] buf = new byte[8];			in.read(buf);			for (int a = 7; a >= 0; a--) {				val = val << 8;				val = val | (buf[a] & 0xFF);			}			return val;		} catch (IOException e) {			throw new RuntimeIOException(e);		}	}}