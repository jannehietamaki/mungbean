package mungbean.protocol;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.nio.charset.Charset;public class LittleEndianDataReader {	private final static Charset UTF8 = Charset.forName("UTF-8");	private final InputStream in;	public LittleEndianDataReader(InputStream input) {		this.in = input;	}	public int readInt() {		try {			byte[] buf = new byte[4];			in.read(buf);			int value = ((((((buf[3] & 0xFF) << 24) | (buf[2] & 0xFF)) << 16) | (buf[1] & 0xFF)) << 8) | (buf[0] & 0xFF);			return value;		} catch (IOException e) {			throw new RuntimeIOException(e);		}	}	public short readShort() {		try {			byte[] buf = new byte[2];			in.read(buf);			return (short) (((buf[1] & 0xFF) << 8) | (buf[0] & 0xFF));		} catch (IOException e) {			throw new RuntimeIOException(e);		}	}	public int readByte() {		try {			return in.read();		} catch (IOException e) {			throw new RuntimeIOException(e);		}	}	public String readCString() {		ByteArrayOutputStream out = new ByteArrayOutputStream();		int b;		while ((b = readByte()) > 0) {			out.write((byte) b);		}		return new String(out.toByteArray(), UTF8);	}	public void read(byte[] data) {		try {			in.read(data);		} catch (IOException e) {			throw new RuntimeIOException(e);		}	}	public long readLong() {		try {			long val = 0;			byte[] buf = new byte[8];			in.read(buf);			for (int a = 7; a >= 0; a--) {				val = val << 8;				val = val | (buf[a] & 0xFF);			}			return val;		} catch (IOException e) {			throw new RuntimeIOException(e);		}	}}